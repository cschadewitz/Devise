{if NullableTypes:#nullable enable}
using System.Collections.Generic;
using AutoMapper;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using {ApiNamespace}.DTO;
using {BusinessNamespace};
using {DataNamespace};

namespace {ApiNamespace}.Controllers
\{
    [Route("api/[controller]")]
    [ApiController]
    partial class {EntityName}sController : ControllerBase
    \{
        private IRepository<{EntityName}> Repository \{ get; \}
        private IMapper Mapper \{ get; \}

        public {EntityName}sController(IRepository<{EntityName}> {lcase(EntityName)}Repository, IMapper mapper)
        \{
            Repository = {lcase(EntityName)}Repository ?? throw new System.ArgumentNullException(nameof({lcase(EntityName)}Repository));
            Mapper = mapper ?? throw new System.ArgumentNullException(nameof(mapper));
        \}

        {if not(ApiCustom.List):
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<{EntityName}DTO>), StatusCodes.Status200OK)]
        public IEnumerable<{EntityName}DTO> Get()
        \{
            return Mapper.Map<IEnumerable<{EntityName}>, IEnumerable<{EntityName}DTO>>(Repository.List());
        \}

        }
        {if not(ApiCustom.Read):
        [HttpGet("\{id\}")]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof({EntityName}DTO), StatusCodes.Status200OK)]
        public ActionResult<{EntityName}DTO?> Get(int id)
        \{
            {EntityName}? {lcase(EntityName)} = Repository.GetItem(id);
            if ({lcase(EntityName)} is null) 
                return NotFound();
            return Mapper.Map<{EntityName}, {EntityName}DTO>({lcase(EntityName)});
        \}

        }
        {if not(ApiCustom.Delete):
        [HttpDelete("\{id\}")]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status302Found)]
        public ActionResult Delete(int id)
        \{
            if (Repository.Remove(id))
                return Ok();
            return NotFound();
        \}

        }
        {if not(ApiCustom.Create):
        [HttpPost]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof({EntityName}DTO), StatusCodes.Status200OK)]
        public ActionResult<{EntityName}DTO?> Post([FromBody] {EntityName}DTO? {lcase(EntityName)})
        \{
            if ({lcase(EntityName)} is null)
                return BadRequest();
            return Mapper.Map<{EntityName}, {EntityName}DTO>(Repository.Create(Mapper.Map<{EntityName}DTO, {EntityName}>({lcase(EntityName)})));
        \}

        }
        {if not(ApiCustom.Update):
        [HttpPut("\{id\}")]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult Put(int id, [FromBody] {EntityName}DTO? {lcase(EntityName)})
        \{
            Data.{EntityName}? found{EntityName} = Repository.GetItem(id);
            if (found{EntityName} is not null && {lcase(EntityName)} is not null)
            \{
                {for Property, Type in EntityProperties:
                found{EntityName}.{Property} = {lcase(EntityName)}.{Property};
                }
                Repository.Save(found{EntityName});
                return Ok();
            \}
            return NotFound();
        \}
        }
    \}
\}